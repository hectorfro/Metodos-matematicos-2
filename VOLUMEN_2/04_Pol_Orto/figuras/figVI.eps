%!PS-Adobe-3.0 EPSF-3.0
%%BoundingBox: 20 118 575 673
%%Creator: FreeHEP Graphics2D Driver
%%Producer: com.maplesoft.mathdoc.view.plot.paint.PlotPSGraphics2D Revision: 12753 
%%For: 
%%Title: 
%%CreationDate: Friday, October 22, 2010 1:03:48 AM VET
%%LanguageLevel: 3
%%EndComments
%%BeginProlog
100 dict dup begin

%
% File: org/freehep/graphicsio.ps/PSProlog.txt
% Author: Charles Loomis
%

% Redefinitions which save some space in the output file.  These are also
% the same as the PDF operators.
/q {gsave} def
/Q {grestore} def

/n {newpath} def
/m {moveto} def
/l {lineto} def
/c {curveto} def
/h {closepath} def

/re {4 -2 roll moveto
     dup 0 exch rlineto exch 0 rlineto
     neg 0 exch rlineto closepath} def

/f {fill} def
/f* {eofill} def
/F {gsave vg&FC fill grestore} def
/F* {gsave vg&FC eofill grestore} def

/s {closepath stroke} def
/S {stroke} def

/b {closepath gsave vg&FC fill grestore
    gsave stroke grestore newpath} def
/B {gsave vg&FC fill grestore gsave stroke grestore newpath} def
/b* {closepath gsave vg&FC eofill grestore
    gsave stroke grestore newpath} def
/B* {gsave vg&FC eofill grestore gsave stroke grestore newpath} def

/g {1 array astore /vg&fcolor exch def} def
/G {setgray} def
/k {4 array astore /vg&fcolor exch def} def
/K {setcmykcolor} def
/rg {3 array astore /vg&fcolor exch def} def
/RG {setrgbcolor} def

% Initialize the fill color.
0 0 0 rg

/vg&FC {mark vg&fcolor aload pop
        counttomark 1 eq {G} if
        counttomark 3 eq {RG} if
        counttomark 4 eq {K} if
        cleartomark } def

/vg&DFC {/vg&fcolor exch def} def

/vg&C {mark exch aload pop
       counttomark 1 eq {G} if
       counttomark 3 eq {RG} if
       counttomark 4 eq {K} if
       cleartomark } def

/w {setlinewidth} def
/j {setlinejoin} def
/J {setlinecap} def
/M {setmiterlimit} def
/d {setdash} def
/i {setflat} def

/W {clip} def
/W* {eoclip} def

% Setup the default graphics state.
% (black; 1 pt. linewidth; miter join; butt-ends; solid)
/defaultGraphicsState {0 g 1 w 0 j 0 J [] 0 d} def

% Emulation of the rectangle operators for PostScript implementations
% which do not implement all Level 2 features.  This is an INCOMPLETE
% emulation; only the "x y width height rect..." form is emulated.
/*rf {gsave newpath re fill grestore} def
/*rs {gsave newpath re stroke grestore} def
/*rc {newpath re clip} def
/rf  /rectfill where {pop /rectfill}{/*rf} ifelse load def
/rs  /rectstroke where {pop /rectstroke}{/*rs} ifelse load def
/rc  /rectclip where {pop /rectclip}{/*rc} ifelse load def

% Emulation of the selectfont operator.  This includes a 20% increase in
% the fontsize which is necessary to get sizes similar to the Java fonts.
/*sf {exch findfont exch
      dup type /arraytype eq {makefont}{scalefont} ifelse setfont} bind def
/sf /selectfont where {pop {1.2 mul selectfont}}{{1.2 mul *sf}} ifelse def

% Special version of stroke which allows the dash pattern to continue
% across path segments.  (This may be needed for PostScript although
% modern printers seem to do this correctly.)
/vg&stroke {
  currentdash pop length 0 eq
  {stroke}
  {
    currentdash /vg&doffset exch def pop
    flattenpath
    {m vg&resetdash}
    {2 copy
     currentpoint
     3 -1 roll sub dup mul
     3 1 roll sub dup mul
     add sqrt
     3 1 roll l
     currentdash 3 -1 roll add setdash}
     {}
     {h vg&resetdash}
     pathforall
     stroke
     vg&resetdash
  } ifelse
} def
/vg&resetdash {currentdash pop vg&doffset setdash} def

% Initialize variables for safety.
/delta 0 def
/xv 0 def  /yv 0 def  /width 0 def  /height 0 def

% Initialize to portrait INTERNATIONAL (Letter-height, A4-width) page.
/pw 595 def  /ph 791  def  /po true def /ftp false def

% Initialize margins to 20 points.
/ml 20 def  /mr 20 def  /mt 20 def  /mb 20 def

% Temporary matrices.
/smatrix 0 def  /nmatrix 0 def

% set page size (usage: <page width><page height> setpagesize)
/setpagesize {/ph exch def /pw exch def} def

% set page orientation (usage: portrait or landscape)
/portrait {/po true def} def
/landscape {/po false def} def

% force natural size for image (usage: naturalsize)
/naturalsize {/ftp false def} def

% resize image to fill page (usage: fittopage)
/fittopage {/ftp true def} def

% set margins of the page (usage: <left><bottom><top><right> setmargins)
/setmargins {/mr exch def /mt exch def /mb exch def /ml exch def} def

% set the graphic's size (usage: <width><height> setsize)
/setsize {/gh exch def /gw exch def} def

% set the graphic's origin (usage: <x0><y0> setorigin)
/setorigin {/gy exch def /gx exch def} def

% calculate image center
/imagecenter {pw ml sub mr sub 2 div ml add
              ph mt sub mb sub 2 div mb add} def

% calculate the necessary scaling
/imagescale {po {gw}{gh} ifelse pw ml sub mr sub div
             po {gh}{gw} ifelse ph mt sub mb sub div
             2 copy lt {exch} if pop
             ftp not {1 2 copy lt {exch} if pop} if
             1 exch div /sfactor exch def
             /gw gw sfactor mul def /gh gh sfactor mul def} def

% calculate image origin
/imageorigin {pw ml sub mr sub 2 div ml add
              po {gw}{gh} ifelse 2 div sub
              ph mt sub mb sub 2 div mb add
              po {gh}{gw} ifelse 2 div po {add}{sub} ifelse} def

% calculate the clipping origin
/cliporigin  {pw ml sub mr sub 2 div ml add
              po {gw}{gh} ifelse 2 div sub floor
              ph mt sub mb sub 2 div mb add
              po {gh}{gw} ifelse 2 div sub floor} def

% Set the clipping region to the bounding box.
/cliptobounds {cliporigin po {gw}{gh} ifelse 1 add
                          po {gh}{gw} ifelse 1 add rc} def

% set the base transformation matrix (usage: setbasematrix)
/setbasematrix {imageorigin translate
                po {0}{90} ifelse rotate
                sfactor sfactor neg scale
                /defaultmatrix matrix currentmatrix def} def

% The lower-right bias in drawing 1 pt. wide lines.
/bias  {q 0.5 0.5 translate} def
/unbias {Q} def

% Draw a line. (x0 y0 x1 y1 line)
/L {bias n m l S unbias} def

% Polyline primitive.
/polyline  {n m 1 exch 1 exch
           {pop currentfile token pop currentfile token pop l} for
           } def

% Draw a polyline (n x0 y0 OPL x1 y1 x2 y2 ... ... xn yn)
/OPL {bias polyline S unbias} def

% Draw a closed polyline (n x0 y0 CPL x1 y1 x2 y2 ... ... xn yn)
/CPL {bias polyline s unbias} def

% Draw a filled polyline (n x0 y0 FPL x1 y1 x2 y2 ... ... xn yn)
/FPL {polyline h f*} def

% Draw an oval. (x y w h OVL)
/OVL {matrix currentmatrix /smatrix exch def
      /height exch def /width exch def
      /yv exch def /xv exch def
      width 2 div xv add height 2 div yv add translate
      width currentlinewidth sub 2 div
      height currentlinewidth sub 2 div neg
      scale n 0 0 1 5 -2 roll arc
      smatrix setmatrix S} def

% Draw a filled oval. (x y w h FOVL)
/FOVL {matrix currentmatrix /smatrix exch def
      /height exch def /width exch def
      /yv exch def /xv exch def
      width 2 div xv add height 2 div yv add translate
      width 2 div
      height 2 div neg
      scale n 0 0 m 0 0 1 5 -2 roll arc
      h smatrix setmatrix f} def

% Draw a rounded rectangle. (x y w h arcwidth archeight RREC)
/RREC {matrix currentmatrix /smatrix exch def
      2 div /ah exch def
      2 div /aw exch def
      /height exch def /width exch def
      /yv exch def /xv exch def
      aw ah scale matrix
      currentmatrix /nmatrix exch def
      smatrix setmatrix
      n xv width add aw sub yv m
      nmatrix setmatrix
      currentpoint exch 1 add exch
      currentpoint 1 add exch 1 add exch
      1 arct smatrix setmatrix
      xv width add yv height add ah sub l
      nmatrix setmatrix
      currentpoint 1 add
      currentpoint exch 1 sub exch 1 add
      1 arct smatrix setmatrix
      xv aw add yv height add l
      nmatrix setmatrix
      currentpoint exch 1 sub exch
      currentpoint exch 1 sub exch 1 sub
      1 arct smatrix setmatrix
      xv yv ah add l
      nmatrix setmatrix
      currentpoint 1 sub
      currentpoint exch 1 add exch 1 sub
      1 arct smatrix setmatrix
      s} def

% Draw a filled rounded rectangle. (x y w h arcwidth archeight FRREC)
/FRREC{matrix currentmatrix /smatrix exch def
      2 div /ah exch def
      2 div /aw exch def
      /height exch def /width exch def
      /yv exch def /xv exch def
      aw ah scale matrix
      currentmatrix /nmatrix exch def
      smatrix setmatrix
      n xv width add aw sub yv m
      nmatrix setmatrix
      currentpoint exch 1 add exch
      currentpoint 1 add exch 1 add exch
      1 arct smatrix setmatrix
      xv width add yv height add ah sub l
      nmatrix setmatrix
      currentpoint 1 add
      currentpoint exch 1 sub exch 1 add
      1 arct smatrix setmatrix
      xv aw add yv height add l
      nmatrix setmatrix
      currentpoint exch 1 sub exch
      currentpoint exch 1 sub exch 1 sub
      1 arct smatrix setmatrix
      xv yv ah add l
      nmatrix setmatrix
      currentpoint 1 sub
      currentpoint exch 1 add exch 1 sub
      1 arct smatrix setmatrix
      h f} def

% Draw a string.  (string x y STR)
/STR {q m 1 -1 scale recshow Q} def

% Define basic plot symbols.
/xys   {/siz exch def /yv exch def /xv exch def} def
/hline {xys n xv siz 2. div sub yv m siz 0 rlineto S} def
/vline {xys n xv yv siz 2. div sub m 0 siz rlineto S} def
/plus  {xys n xv yv siz 2. div sub m 0 siz rlineto
                    xv siz 2. div sub yv m siz 0 rlineto S} def
/dot   {n 2. div 0 360 arc s} def
/fdot  {n 2. div 0 360 arc h f} def
/box   {xys n xv siz 2 sqrt div 2 div sub yv siz 2 sqrt div 2 div sub
                    siz 2 sqrt div dup rs} def
/fbox  {xys n xv siz 2 sqrt div 2 div sub yv siz 2 sqrt div 2 div sub
                       siz 2 sqrt div dup rf} def
/tridn{xys n xv yv siz 3 sqrt div add m
                       siz 2. div neg 3 sqrt 2. div siz mul neg rlineto
                       siz 0 rlineto s} def
/ftridn{xys n xv yv siz 3 sqrt div add m
                       siz 2. div neg 3 sqrt 2. div siz mul neg rlineto
                       siz 0 rlineto h f} def

% Symbols defined in terms of the others.
/star     {3 copy cross plus} def
/cross    {xys q xv yv translate 45 rotate 0 0 siz plus Q} def
/diamond  {xys q xv yv translate 45 rotate 0 0 siz box Q} def
/fdiamond {xys q xv yv translate 45 rotate 0 0 siz fbox Q} def
/triup    {xys q xv yv translate 180 rotate 0 0 siz tridn Q} def
/ftriup   {xys q xv yv translate 180 rotate 0 0 siz ftridn Q} def

% Define the composite fonts used to print Unicode strings.
% Undefine particular values in an encoding array.
/vg&undef { {exch dup 3 -1 roll /.notdef put} forall } def
/vg&redef { {3 -1 roll dup 4 2 roll put} forall } def

% usage: key encoding basefontname vg&newbasefont font
/vg&newbasefont {
findfont dup length dict copy
  begin
    currentdict /FID undef
    /Encoding exch def
    dup /FontName exch def
    currentdict
  end
definefont
} def

% usage: key encoding basefontname vg&newskewedbasefont font
/vg&newskewedbasefont {
findfont dup length dict copy
  begin
    currentdict /FID undef
    /Encoding exch def
    dup /FontName exch def
    exch FontMatrix exch matrix concatmatrix /FontMatrix exch def
    currentdict
  end
definefont
} def

% usage: basekey suffix vg&nconcat name
/vg&nconcat {
  2 {dup length string cvs exch} repeat
  dup length 3 -1 roll dup length 3 -1 roll add string
  dup 0 4 -1 roll dup length 5 1 roll putinterval
  dup 4 -2 roll exch putinterval cvn
} def

%usage: fontname vg&skewmatrix matrix
/vg&skewmatrix {
findfont dup /FontInfo known
  {
    /FontInfo get dup /ItalicAngle known
    {
      [ 1 0 4 -1 roll /ItalicAngle get neg dup sin exch cos div 1 0 0 ]
    }
    {pop matrix} ifelse
  }
  {pop matrix} ifelse
} def

% usage: newfontname basefontname vg&newcompositefont --
/vg&newcompositefont {
/vg&fstyle exch def
/vg&bfont exch def
/vg&fname exch def
<<
/FontStyleBits vg&fstyle
/FontType 0
/FontMatrix matrix
/FontName vg&fname
/FMapType 2
/Encoding [ 0 1 255 {pop 6} for ]
          dup 16#00 0 put % Latin
          dup 16#03 1 put % Greek
          dup 16#20 2 put % Punctuation
          dup 16#21 3 put % Arrows
          dup 16#22 4 put % MathOps
          dup 16#27 5 put % Dingbats

/FDepVector [
vg&bfont /-UC-Latin vg&nconcat UCLatinEncoding
vg&bfont vg&newbasefont

vg&bfont vg&skewmatrix
vg&bfont /-UC-Greek vg&nconcat UCGreekEncoding
/Symbol vg&newskewedbasefont

vg&bfont /-UC-Punctuation vg&nconcat UCPunctuationEncoding
vg&bfont vg&newbasefont

/Arrows-UC findfont
/MathOps-UC findfont
/Dingbats-UC findfont
/Undefined-UC findfont ]
>>
vg&fname exch definefont pop
} def

% Null encoding vector (all elements set to .notdef)
/NullEncoding [ 256 {/.notdef} repeat ] def

% Unicode Latin encoding (unicode codes \u0000-\u00ff)
/UCLatinEncoding
  ISOLatin1Encoding dup length array copy
  dup 16#60 /grave put
  [ 16#90 16#91 16#92 16#93 16#94 16#95 16#96
    16#97 16#98 16#9a 16#9b 16#9d 16#9e 16#9f
  ] vg&undef
  def

% Unicode Greek encoding (unicode codes \u0370-\u03ff)
/UCGreekEncoding
  NullEncoding dup length array copy
  << 16#91 /Alpha    16#92 /Beta      16#93 /Gamma    16#94 /Delta
     16#95 /Epsilon  16#96 /Zeta      16#97 /Eta      16#98 /Theta
     16#99 /Iota     16#9a /Kappa     16#9b /Lambda   16#9c /Mu
     16#9d /Nu       16#9e /Xi        16#9f /Omicron  16#a0 /Pi
     16#a1 /Rho      16#a3 /Sigma     16#a4 /Tau      16#a5 /Upsilon
     16#a6 /Phi      16#a7 /Chi       16#a8 /Psi      16#a9 /Omega
     16#b1 /alpha    16#b2 /beta      16#b3 /gamma    16#b4 /delta
     16#b5 /epsilon  16#b6 /zeta      16#b7 /eta      16#b8 /theta
     16#b9 /iota     16#ba /kappa     16#bb /lambda   16#bc /mu
     16#bd /nu       16#be /xi        16#bf /omicron  16#c0 /pi
     16#c1 /rho      16#c2 /sigma1    16#c3 /sigma    16#c4 /tau
     16#c5 /upsilon  16#c6 /phi1      16#c7 /chi      16#c8 /psi
     16#c9 /omega    16#7e /semicolon 16#87 /dotmath  16#d1 /theta1
     16#d2 /Upsilon1 16#d5 /phi       16#d6 /omega1
  >> vg&redef
  def

% Unicode punctuation encoding (unicode codes \u2000-\u206f)
/UCPunctuationEncoding
  NullEncoding dup length array copy
  << 16#10 /hyphen          16#11 /hyphen              16#12 /endash
     16#13 /emdash          16#18 /quoteleft           16#19 /quoteright
     16#1a /quotesinglbase  16#1b /quotesingle         16#1c /quotedblleft
     16#1d /quotedblright   16#1e /quotedblbase        16#1f /quotedbl
     16#20 /dagger          16#21 /daggerdbl           16#22 /bullet
     16#24 /period          16#26 /ellipsis            16#27 /periodcentered
     16#30 /perthousand     16#44 /fraction
     16#70 /zerosuperior    16#74 /foursuperior        16#75 /fivesuperior
     16#76 /sixsuperior     16#77 /sevensuperior       16#78 /eightsuperior
     16#79 /ninesuperior    16#7b /hyphensuperior      16#7d /parenleftsuperior
     16#7e /parenrightsuperior
     16#80 /zeroinferior    16#84 /fourinferior        16#85 /fiveinferior
     16#81 /oneinferior     16#82 /twoinferior         16#83 /threeinferior
     16#86 /sixinferior     16#87 /seveninferior       16#88 /eightinferior
     16#89 /nineinferior    16#8b /hypheninferior      16#8d /parenleftinferior
     16#8e /parenrightinferior
  >> vg&redef
  def

% Unicode mathematical operators encoding (unicode codes \u2200-\u22ff)
/UCMathOpsEncoding
  NullEncoding dup length array copy
  << 16#00 /universal       16#02 /partialdiff         16#03 /existential
     16#05 /emptyset        16#06 /Delta               16#07 /gradient
     16#08 /element         16#09 /notelement          16#0b /suchthat
     16#0f /product         16#11 /summation           16#12 /minus
     16#15 /fraction        16#17 /asteriskmath        16#19 /bullet
     16#1a /radical         16#1d /proportional        16#1e /infinity
     16#20 /angle           16#23 /bar                 16#27 /logicaland
     16#28 /logicalor       16#29 /intersection        16#2a /union
     16#2b /integral        16#34 /therefore           16#36 /colon
     16#3c /similar         16#45 /congruent           16#48 /approxequal
     16#60 /notequal        16#61 /equivalence         16#64 /lessequal
     16#65 /greaterequal    16#82 /propersubset        16#83 /propersuperset
     16#86 /reflexsubset    16#87 /reflexsuperset      16#95 /circleplus
     16#97 /circlemultiply  16#a5 /perpendicular       16#03 /existential
     16#c0 /logicaland      16#c1 /logicalor           16#c2 /intersection
     16#c3 /union           16#c4 /diamond             16#c5 /dotmath
  >> vg&redef
  def

% Unicode arrows encoding (unicode codes \u2190-\u21ff)
% Also includes those "Letterlike" unicode characters
% which are available in the symbol font. (unicode codes \u2100-\u214f)
/UCArrowsEncoding
  NullEncoding dup length array copy
  << 16#11 /Ifraktur        16#1c /Rfraktur            16#22 /trademarkserif
     16#35 /aleph
     16#90 /arrowleft       16#91 /arrowup             16#92 /arrowright
     16#93 /arrowdown       16#94 /arrowboth           16#d0 /arrowdblleft
     16#d1 /arrowdblup      16#d2 /arrowdblright       16#d3 /arrowdbldown
     16#d4 /arrowdblboth
  >> vg&redef
  def

/ZapfDingbats findfont /Encoding get
dup length array copy /UCDingbatsEncoding exch def
16#20 1 16#7f {
  dup 16#20 sub exch
  UCDingbatsEncoding exch get
  UCDingbatsEncoding 3 1 roll put
} for
16#a0 1 16#ff {
  dup 16#40 sub exch
  UCDingbatsEncoding exch get
  UCDingbatsEncoding 3 1 roll put
} for
UCDingbatsEncoding [ 16#c0 1 16#ff {} for ] vg&undef
[ 16#00  16#05 16#0a 16#0b  16#28 16#4c 16#4e  16#53 16#54 16#55  16#57 16#5f
  16#60  16#68 16#69 16#6a  16#6b 16#6c 16#6d  16#6e 16#6f 16#70  16#71 16#72
  16#73  16#74 16#75 16#95  16#96 16#97 16#b0  16#bf
] vg&undef pop

% Define the base fonts which don't change.
/Undefined-UC NullEncoding       /Helvetica    vg&newbasefont pop
/MathOps-UC   UCMathOpsEncoding  /Symbol       vg&newbasefont pop
/Arrows-UC    UCArrowsEncoding   /Symbol       vg&newbasefont pop
/Dingbats-UC  UCDingbatsEncoding /ZapfDingbats vg&newbasefont pop

% Make the SansSerif composite fonts.
/SansSerif /Helvetica 16#00 vg&newcompositefont
/SansSerif-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/SansSerif-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/SansSerif-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the Serif composite fonts.
/Serif /Times-Roman 16#00 vg&newcompositefont
/Serif-Bold /Times-Bold 16#01 vg&newcompositefont
/Serif-Italic /Times-Italic 16#02 vg&newcompositefont
/Serif-BoldItalic /Times-BoldItalic 16#03 vg&newcompositefont

% Make the Monospaced composite fonts.
/Monospaced /Courier 16#00 vg&newcompositefont
/Monospaced-Bold /Courier-Bold 16#01 vg&newcompositefont
/Monospaced-Italic /Courier-Oblique 16#02 vg&newcompositefont
/Monospaced-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont

% Make the Dialog composite fonts.
/Dialog /Helvetica 16#00 vg&newcompositefont
/Dialog-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/Dialog-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/Dialog-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the DialogInput composite fonts.
/DialogInput /Helvetica 16#00 vg&newcompositefont
/DialogInput-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/DialogInput-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/DialogInput-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the Typewriter composite fonts (JDK 1.1 only).
/Typewriter /Courier 16#00 vg&newcompositefont
/Typewriter-Bold /Courier-Bold 16#01 vg&newcompositefont
/Typewriter-Italic /Courier-Oblique 16#02 vg&newcompositefont
/Typewriter-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont


/cfontH {
 dup /fontsize exch def /SansSerif exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHB {
  dup /fontsize exch def /SansSerif-Bold exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHI {
 dup /fontsize exch def /SansSerif-Italic exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHBI {
 dup /fontsize exch def /SansSerif-BoldItalic exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def

/cfontT {
 dup /fontsize exch def /Serif exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTB {
 dup /fontsize exch def /Serif-Bold exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTI {
 dup /fontsize exch def /Serif-Italic exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTBI {
 dup /fontsize exch def /Serif-BoldItalic exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def

/cfontC {
 dup /fontsize exch def /Typewriter exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCB {
 dup /fontsize exch def /Typewriter-Bold exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCI {
 dup /fontsize exch def /Typewriter-Italic exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCBI {
 dup /fontsize exch def /Typewriter-BoldItalic exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def

% Darken or lighten the current color.
/darken {0.7 exch exp 3 copy
         q 4 -1 roll vg&C
         currentrgbcolor 3 {4 -2 roll mul} repeat
         3 array astore Q} def

/displayColorMap
<< /Cr   [1.00 0.00 0.00]       /Cg     [0.00 1.00 0.00]
   /Cb   [0.00 0.00 1.00]       /Cc     [1.00 0.00 0.00 0.00]
   /Cm   [0.00 1.00 0.00 0.00]  /Cy     [0.00 0.00 1.00 0.00]
   /Co   [1.00 0.78 0.00]       /Cp     [1.00 0.67 0.67]
   /Cw   [1   ]                 /Cgrl   [0.75]
   /Cgr  [0.50]                 /Cgrd   [0.25]
   /Ck   [0   ]
   /CGr  [1.00 0.00 0.00]       /CGg    [0.00 1.00 0.00]
   /CGb  [0.00 0.00 1.00]       /CGc    [1.00 0.00 0.00 0.00]
   /CGm  [0.00 1.00 0.00 0.00]  /CGy    [0.00 0.00 1.00 0.00]
   /CGo  [1.00 0.78 0.00]       /CGp    [1.00 0.67 0.67]
   /CGw  [1   ]                 /CGgrl  [0.75]
   /CGgr [0.50]                 /CGgrd  [0.25]
   /CGk  [0   ]
   /CIr  [1.00 0.00 0.00]       /CIg    [0.00 1.00 0.00]
   /CIb  [0.00 0.00 1.00]       /CIc    [1.00 0.00 0.00 0.00]
   /CIm  [0.00 1.00 0.00 0.00]  /CIy    [0.00 0.00 1.00 0.00]
   /CIo  [1.00 0.78 0.00]       /CIp    [1.00 0.67 0.67]
   /CIw  [1   ]                 /CIgrl  [0.75]
   /CIgr [0.50]                 /CIgrd  [0.25]
   /CIk  [0   ]
>> def

/printColorMap
<< /Cr   [1.00 0.33 0.33]       /Cg     [0.33 1.00 0.33]
   /Cb   [0.33 0.33 1.00]       /Cc     [1.00 0.00 0.00 0.00]
   /Cm   [0.00 1.00 0.00 0.00]  /Cy     [0.00 0.00 1.00 0.00]
   /Co   [1.00 0.78 0.00]       /Cp     [1.00 0.67 0.67]
   /Cw   [1   ]                 /Cgrl   [0.75]
   /Cgr  [0.50]                 /Cgrd   [0.25]
   /Ck   [0   ]
   /CGr  [1.00 0.33 0.33]       /CGg    [0.33 1.00 0.33]
   /CGb  [0.33 0.33 1.00]       /CGc    [1.00 0.00 0.00 0.00]
   /CGm  [0.00 1.00 0.00 0.00]  /CGy    [0.00 0.00 1.00 0.00]
   /CGo  [1.00 0.78 0.00]       /CGp    [1.00 0.67 0.67]
   /CGw  [1   ]                 /CGgrl  [0.75]
   /CGgr [0.50]                 /CGgrd  [0.25]
   /CGk  [0   ]
   /CIr  [1.00 0.33 0.33]       /CIg    [0.33 1.00 0.33]
   /CIb  [0.33 0.33 1.00]       /CIc    [1.00 0.00 0.00 0.00]
   /CIm  [0.00 1.00 0.00 0.00]  /CIy    [0.00 0.00 1.00 0.00]
   /CIo  [1.00 0.78 0.00]       /CIp    [1.00 0.67 0.67]
   /CIw  [1   ]                 /CIgrl  [0.75]
   /CIgr [0.50]                 /CIgrd  [0.25]
   /CIk  [0   ]
>> def

/grayColorMap
<< /Cr   [0   ]                 /Cg     [0   ]
   /Cb   [0   ]                 /Cc     [0   ]
   /Cm   [0   ]                 /Cy     [0   ]
   /Co   [0   ]                 /Cp     [0   ]
   /Cw   [0   ]                 /Cgrl   [0   ]
   /Cgr  [0   ]                 /Cgrd   [0   ]
   /Ck   [0   ]
   /CGr  [0.75]                 /CGg    [1   ]
   /CGb  [0.50]                 /CGc    [0.75]
   /CGm  [0.50]                 /CGy    [1   ]
   /CGo  [0.75]                 /CGp    [1   ]
   /CGw  [0   ]                 /CGgrl  [0.25]
   /CGgr [0.50]                 /CGgrd  [0.75]
   /CGk  [1   ]
   /CIr  [1   ]                 /CIg    [1   ]
   /CIb  [1   ]                 /CIc    [1   ]
   /CIm  [1   ]                 /CIy    [1   ]
   /CIo  [1   ]                 /CIp    [1   ]
   /CIw  [1   ]                 /CIgrl  [1   ]
   /CIgr [1   ]                 /CIgrd  [1   ]
   /CIk  [1   ]
>> def

/bwColorMap
<< /Cr   [0   ]                 /Cg     [0   ]
   /Cb   [0   ]                 /Cc     [0   ]
   /Cm   [0   ]                 /Cy     [0   ]
   /Co   [0   ]                 /Cp     [0   ]
   /Cw   [0   ]                 /Cgrl   [0   ]
   /Cgr  [0   ]                 /Cgrd   [0   ]
   /Ck   [0   ]
   /CGr  [1   ]                 /CGg    [1   ]
   /CGb  [1   ]                 /CGc    [1   ]
   /CGm  [1   ]                 /CGy    [1   ]
   /CGo  [1   ]                 /CGp    [1   ]
   /CGw  [0   ]                 /CGgrl  [1   ]
   /CGgr [1   ]                 /CGgrd  [1   ]
   /CGk  [1   ]
   /CIr  [1   ]                 /CIg    [1   ]
   /CIb  [1   ]                 /CIc    [1   ]
   /CIm  [1   ]                 /CIy    [1   ]
   /CIo  [1   ]                 /CIp    [1   ]
   /CIw  [1   ]                 /CIgrl  [1   ]
   /CIgr [1   ]                 /CIgrd  [1   ]
   /CIk  [1   ]
>> def

%
% The following routines handle the alignment of and printing of
% tagged strings.
%

% Predefine the bounding box values.
/bbllx 0 def /bblly 0 def /bburx 0 def /bbury 0 def

% This routine pops the first unicode character off of a string and returns
% the remainder of the string, the character code of first character,
% and a "true" if the string was non-zero length.
% <string>      popfirst <remaining string> <true>
% <null string> popfirst <false>
/popfirst {
  dup length 1 gt
    {dup 0 get /vg&fbyte exch def
     dup 1 get /vg&cbyte exch def
     dup length 2 sub 2 exch getinterval true}
    {pop false} ifelse
} def

% This routine shows a single unicode character given the font and
% character codes.
% <font code> <char code> unicharshow --
/unicharshow {
  2 string
  dup 0 5 -1 roll put
  dup 1 4 -1 roll put
  internalshow
} def

% This is an internal routine to alternate between determining the
% bounding box for stringsize and showing the string for recshow.
% <string> internalshow --
/internalshow {show} def

% This is an internal routine to alternate between determining the
% bounding box for stringsize and stroking various ornaments.
% <string> internalstroke --
/internalstroke {S} def

% Sets up internalshow to use the null device to determine string size.
% -- nullinternalshow --
/nullinternalshow {/internalshow {false charpath flattenpath
                                  pathbbox updatebbox} def} def

% Sets up internalstroke to use the null device to determine string size.
% -- nullinternalstroke --
/nullinternalstroke {
 /internalstroke {flattenpath pathbbox updatebbox} def} def

% This routine tests to see if the character code matches the first
% character of a string.
% <char code> <string> testchar <char code> <true or false>
/testchar {exch dup 3 -1 roll 0 get eq} def

% Raise the text baseline for superscripts.
% -- raise --
/raise {
  0 fontsize 2 div rmoveto
  /fontsize fontsize 2 mul 3 div def
  currentfont /FontName get fontsize sf
} def

% Un-raise the text baseline for superscripts.
% -- unraise --
/unraise {
  /fontsize fontsize 1.5 mul def
  0 fontsize 2 div neg rmoveto
} def

% Lower the text baseline for subscripts.
% -- lower --
/lower {
  0 fontsize 3 div neg rmoveto
  /fontsize fontsize 2 mul 3 div def
  currentfont /FontName get fontsize sf
} def

% Un-lower the text baseline for subscripts.
% -- unlower --
/unlower {
  /fontsize fontsize 1.5 mul def
  0 fontsize 3 div rmoveto
} def

% Compare the top two elements on the stack and leave only the
% larger one.
/maxval {2 copy gt {pop} {exch pop} ifelse} def

% Tokenize a string.  Do not use the usual PostScript token because
% parentheses will not be interpreted correctly because of rescanning
% of the string.
/vg&token {/vg&string exch def /vg&index -1 def /vg&level 0 def
0 2 vg&string length 2 sub {
  dup dup 1 add exch vg&string exch get 8 bitshift vg&string 3 -1 roll get or
  dup 16#f0fe eq {pop 1}{16#f0ff eq {-1}{0} ifelse} ifelse
  /vg&level exch vg&level add def
  vg&level 0 eq {/vg&index exch def exit} if pop
} for
vg&index 0 ge {
  vg&string vg&index 2 add dup vg&string length exch sub getinterval
  vg&index 2 gt {vg&string 2 vg&index 2 sub getinterval}{()} ifelse
  true}
{false} ifelse
} bind def

% Recursively show an unicode string.
% <string> recshow --
/recshow {
  popfirst
  {
    % Test to see if this is a string attribute.
    vg&fbyte 16#f0 and 16#e0 eq
    {
      q

      % Font style.
      currentfont dup /FontStyleBits known {/FontStyleBits get}{pop 0} ifelse
      vg&cbyte or vg&fontstyles exch get fontsize exch exec

      vg&token pop recshow currentpoint Q m recshow
    }
    {
      vg&fbyte 16#F8 and 16#F0 eq {

        % Superscript and/or subscript.
        vg&cbyte 16#00 eq {
          vg&token pop exch vg&token pop 3 -1 roll
          q raise recshow unraise currentpoint pop Q exch
          q lower recshow unlower currentpoint pop Q
          maxval currentpoint exch pop m recshow } if

        % Strikeout.
        vg&cbyte 16#01 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          currentpoint 4 -2 roll fontsize 3 div add moveto
          fontsize 3 div add lineto internalstroke Q
          recshow} if

        % Underline.
        vg&cbyte 16#02 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Dashed underline.
        vg&cbyte 16#03 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J [ vg&uthick 5 mul vg&uthick 2 mul] 0 d
          vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Dotted underline.
        vg&cbyte 16#04 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 1 J [ 0 vg&uthick 3 mul] 0 d
          vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Thick underline.
        vg&cbyte 16#05 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick 2 mul w
          currentpoint 4 -2 roll vg&uoffset vg&uthick 2 div sub add moveto
          vg&uoffset vg&uthick 2 div sub add lineto internalstroke Q
          recshow} if

        % Gray thick underline.
        vg&cbyte 16#06 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick 2 mul w 0.5 setgray
          currentpoint 4 -2 roll vg&uoffset vg&uthick 2 div sub add moveto
          vg&uoffset vg&uthick 2 div sub add lineto internalstroke Q
          recshow} if

        % Overbar.
        vg&cbyte 16#07 eq {
          vg&token pop dup stringsize relative 4 1 roll pop pop exch
          3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          vg&uoffset neg add dup currentpoint pop exch m l internalstroke Q
          recshow} if
      }
      {
        vg&fbyte vg&cbyte unicharshow recshow
      } ifelse
    } ifelse
  } if
} def

% Get the underline position and thickness from the current font.
/vg&underline {

currentfont dup /FontType get 0 eq {/FDepVector get 0 get} if
dup dup /FontInfo known {
  /FontInfo get dup
  dup /UnderlinePosition known {
    /UnderlinePosition get /vg&uoffset exch def
  }
  {
    pop /vg&uoffset 0 def
  } ifelse
  dup /UnderlineThickness known {
    /UnderlineThickness get /vg&uthick exch def
  }
  {
    pop /vg&uthick 0 def
  } ifelse
}
{
  pop /vg&uoffset 0 def /vg&uthick 0 def
} ifelse
/FontMatrix get
currentfont dup /FontType get 0 eq
{/FontMatrix get matrix concatmatrix}{pop} ifelse
dup 0 vg&uoffset 3 -1 roll transform /vg&uoffset exch def pop
0 vg&uthick 3 -1 roll transform /vg&uthick exch def pop
} def

% Make a frame with the coordinates on the stack.
% <llx> <lly> <urx> <ury> frame --
/frame {4 copy m 3 1 roll exch l 4 -2 roll l l h} def

% Resets the accumulated bounding box to a degenerate box at the
% current point.
% -- resetbbox --
/resetbbox {
  currentpoint 2 copy
  /bbury exch def
  /bburx exch def
  /bblly exch def
  /bbllx exch def
} def

% Update the accumulated bounding box.
% <llx'> <lly'> <urx'> <ury'> updatebbox --
/updatebbox {
  dup bbury gt {/bbury exch def} {pop} ifelse
  dup bburx gt {/bburx exch def} {pop} ifelse
  dup bblly lt {/bblly exch def} {pop} ifelse
  dup bbllx lt {/bbllx exch def} {pop} ifelse
} def

% Set the bounding box to the values on the stack.
% <llx'> <lly'> <urx'> <ury'> updatebbox --
/restorebbox {
  /bbury exch def /bburx exch def /bblly exch def /bbllx exch def
} def

% Push the accumulated bounding box onto the stack.
% -- pushbbox <llx> <lly> <urx> <ury>
/pushbbox {bbllx bblly bburx bbury} def

% Make the relative bounding box relative to the currentpoint.
% <llx'> <lly'> <urx'> <ury'> inflate <llx> <lly> <urx> <ury>
/inflate {
  2 {fontsize 0.2 mul add 4 1 roll} repeat
  2 {fontsize 0.2 mul sub 4 1 roll} repeat
} def

% Make the relative bounding box relative to the currentpoint.
% <llx'> <lly'> <urx'> <ury'> relative <llx> <lly> <urx> <ury>
/relative {
  currentpoint 3 -1 roll add 3 1 roll add exch 4 2 roll
  currentpoint 3 -1 roll add 3 1 roll add exch 4 2 roll
} def

% Returns the size of a string appropriate for recshow.
% <string> stringsize <llx> <lly> <urx> <ury>
/stringsize {
  pushbbox /internalshow load /internalstroke load 7 -1 roll
  q
  nulldevice 0 0 m
  nullinternalshow nullinternalstroke
  resetbbox
  recshow
  /internalstroke exch def /internalshow exch def
  pushbbox 8 -4 roll restorebbox
  Q
} def

% Calculate values for string positioning.
/calcval {4 copy
  3 -1 roll sub /widy exch def sub neg /widx exch def
  pop pop /dy exch def /dx exch def} def

% Utilities to position a string.
% First letter (U=upper, C=center, B=baseline, L=lower)
% Second letter (L=left, C=center, R=right)
/align [
{calcval dx neg widy dy add neg rmoveto} % UL
{calcval dx neg widy 2 div dy add neg rmoveto} % CL
{calcval dx neg 0 rmoveto} % BL
{calcval dx neg dy neg rmoveto} % LL
{calcval widx dx add neg widy dy add neg rmoveto} % UR
{calcval widx dx add neg widy 2 div dy add neg rmoveto} % CR
{calcval widx dx add neg 0 rmoveto} % BR
{calcval widx dx add neg dy neg rmoveto} % LR
{calcval widx 2 div dx add neg widy dy add neg rmoveto} % UC
{calcval widx 2 div dx add neg widy 2 div dy add neg rmoveto} % CC
{calcval widx 2 div dx add neg 0 rmoveto} % BC
{calcval widx 2 div dx add neg dy neg rmoveto} % LC
] def

/vg&str {m q 1 -1 scale dup stringsize 4 copy align 11 -1 roll get exec
         q inflate relative frame exch exec Q recshow Q} def

end /procDict exch def
%%EndProlog

%%BeginSetup
save
procDict begin
printColorMap begin
595 791 setpagesize
20 20 20 20 setmargins
0 0 setorigin
400 400 setsize
fittopage
portrait
imagescale
cliptobounds
setbasematrix
/Helvetica 10 sf
defaultGraphicsState
%%EndSetup

0 0 0 RG
[ 1.00000 0 0 1.00000 0 0 ] defaultmatrix matrix concatmatrix setmatrix
cliprestore
1.00000 1.00000 1.00000 RG
newpath
0 0 m
400.000 0 l
400.000 400.000 l
0 400.000 l
0 0 l
h
f
0 0 0 RG
2.00000 w
0 J
1 j
[ 1.00000 0 0 1.00000 0 0 ] concat
[ 1.00000 0 0 1.00000 0 0 ] concat
q
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
0 0 390 390 rc
1.00000 w
2 J
0 j
q
0.647059 0.647059 0.647059 RG
Q
q
0.647059 0.647059 0.647059 RG
Q
2.00000 w
0 J
1 j
q
q
1.00000 0 0 RG
7.00000 2.63047E-3 381.493 383.164 rc
newpath
9.00000 366.120 m
197.236 366.120 l
198.243 364.276 l
385.369 18.3004 l
385.493 366.120 l
S
cliprestore
newpath
0 0 m
0 390.000 l
390.000 390.000 l
390.000 0 l
h
W
Q
q
0 1.00000 0 RG
7.00000 2.63047E-3 381.493 383.164 rc
newpath
9.00000 192.095 m
10.9894 214.089 l
12.9789 235.633 l
14.7099 253.671 l
16.4409 270.765 l
18.3876 288.552 l
20.3343 304.517 l
22.2939 318.485 l
24.2535 330.139 l
28.1541 345.969 l
29.0582 348.209 l
29.9623 349.916 l
30.8663 351.098 l
31.7704 351.766 l
32.7066 351.931 l
33.6427 351.578 l
34.5788 350.727 l
35.5149 349.402 l
37.4512 345.276 l
39.3875 339.499 l
43.2477 324.237 l
47.2183 305.553 l
50.7157 288.712 l
54.6529 271.399 l
58.6062 257.382 l
62.4160 247.899 l
64.1458 244.934 l
65.8757 242.755 l
66.9041 241.803 l
67.9326 241.084 l
68.9611 240.577 l
69.9895 240.257 l
71.7320 240.067 l
73.4745 240.203 l
77.5284 240.970 l
79.3225 241.149 l
81.1167 241.021 l
83.0852 240.375 l
85.0537 239.065 l
86.9282 237.105 l
88.8027 234.391 l
92.7143 226.239 l
96.3064 216.034 l
100.181 202.871 l
104.205 188.098 l
107.709 175.530 l
111.492 163.460 l
115.401 153.641 l
119.226 147.201 l
121.076 145.226 l
122.926 143.934 l
124.980 143.198 l
127.034 143.044 l
128.880 143.246 l
130.726 143.607 l
132.696 143.975 l
134.667 144.121 l
136.453 143.885 l
138.239 143.149 l
140.191 141.619 l
142.143 139.192 l
145.817 131.857 l
149.658 120.150 l
153.413 105.122 l
157.343 86.8205 l
161.129 68.5380 l
165.001 51.5158 l
168.840 38.7983 l
170.604 35.0027 l
172.368 32.7805 l
173.379 32.2834 l
174.390 32.3867 l
175.401 33.1138 l
176.412 34.4840 l
178.220 38.5827 l
180.029 44.8315 l
183.885 65.2637 l
185.730 78.2851 l
187.576 93.1971 l
189.625 111.706 l
191.674 131.920 l
193.448 150.484 l
195.222 169.723 l
199.250 214.248 l
201.086 234.146 l
202.921 253.314 l
204.929 273.061 l
206.936 291.160 l
208.669 305.193 l
210.401 317.568 l
214.347 338.880 l
216.253 345.551 l
218.158 349.835 l
219.111 351.096 l
220.063 351.787 l
221.015 351.924 l
221.967 351.525 l
223.865 349.228 l
225.762 345.108 l
229.408 333.006 l
233.349 315.720 l
237.105 297.582 l
241.058 279.162 l
244.637 264.750 l
248.592 252.542 l
252.380 244.951 l
254.270 242.603 l
256.159 241.096 l
257.146 240.602 l
258.133 240.281 l
259.120 240.111 l
260.107 240.068 l
261.924 240.234 l
263.742 240.578 l
265.604 240.942 l
267.465 241.146 l
269.521 240.990 l
271.576 240.251 l
273.437 238.946 l
275.298 236.949 l
279.105 230.520 l
282.976 220.800 l
286.534 209.516 l
290.327 195.944 l
294.092 182.112 l
298.118 168.371 l
301.671 158.220 l
305.771 149.666 l
307.621 147.015 l
309.471 145.098 l
311.301 143.868 l
313.131 143.218 l
315.100 143.039 l
317.068 143.236 l
321.020 143.987 l
322.818 144.122 l
324.616 143.906 l
326.525 143.126 l
328.435 141.622 l
330.298 139.328 l
332.162 136.125 l
336.201 125.842 l
339.697 113.364 l
343.712 95.7855 l
347.486 77.6106 l
351.224 60.0489 l
354.964 45.1694 l
356.872 39.3593 l
358.779 35.1272 l
359.791 33.6118 l
360.802 32.6449 l
361.813 32.2565 l
362.824 32.4734 l
364.678 34.5158 l
366.532 38.7687 l
370.192 53.7983 l
372.148 65.3732 l
374.105 79.2591 l
376.057 95.2173 l
378.009 113.014 l
379.761 130.296 l
381.513 148.549 l
383.503 170.096 l
385.493 192.095 l
S
cliprestore
newpath
0 0 m
0 390.000 l
390.000 390.000 l
390.000 0 l
h
W
Q
q
0 0 1.00000 RG
7.00000 2.63047E-3 381.493 383.164 rc
newpath
9.00000 192.095 m
9.99472 217.749 l
10.9894 242.840 l
11.9841 266.827 l
12.9789 289.208 l
14.7099 323.049 l
16.4409 348.950 l
18.3876 367.468 l
20.3343 374.825 l
20.8242 375.056 l
21.3141 374.695 l
21.8040 373.781 l
22.2939 372.354 l
23.2737 368.143 l
24.2535 362.439 l
28.1541 332.832 l
31.7704 309.771 l
32.7066 305.985 l
33.6427 303.242 l
34.1107 302.257 l
34.5788 301.520 l
35.0469 301.022 l
35.5149 300.750 l
36.4831 300.835 l
37.4512 301.654 l
38.4194 303.013 l
39.3875 304.703 l
41.3176 308.209 l
43.2477 310.600 l
44.2403 310.988 l
45.2330 310.655 l
46.2257 309.548 l
47.2183 307.658 l
48.9670 302.563 l
50.7157 295.686 l
54.6529 277.932 l
56.6295 270.267 l
58.6062 264.682 l
59.5587 262.852 l
60.5111 261.575 l
61.4636 260.810 l
62.4160 260.489 l
64.1458 260.729 l
65.8757 261.449 l
66.9041 261.805 l
67.9326 261.929 l
68.9611 261.694 l
69.9895 261.001 l
71.7320 258.602 l
73.4745 254.605 l
77.5284 240.653 l
81.1167 227.422 l
83.0852 221.775 l
85.0537 217.916 l
85.9910 216.728 l
86.9282 215.921 l
87.8654 215.441 l
88.8027 215.219 l
90.7585 215.201 l
92.7143 215.078 l
93.6123 214.757 l
94.5104 214.173 l
95.4084 213.274 l
96.3064 212.024 l
98.2437 208.063 l
100.181 202.498 l
104.205 188.117 l
107.709 176.876 l
109.600 172.735 l
111.492 170.228 l
112.470 169.519 l
113.447 169.133 l
114.424 168.988 l
115.401 168.986 l
116.357 169.020 l
117.313 168.987 l
118.270 168.787 l
119.226 168.330 l
121.076 166.444 l
122.926 162.974 l
127.034 150.011 l
130.726 136.041 l
132.696 129.791 l
134.667 125.313 l
135.560 123.956 l
136.453 123.018 l
137.346 122.470 l
138.239 122.264 l
140.191 122.668 l
142.143 123.476 l
143.062 123.699 l
143.980 123.676 l
144.899 123.311 l
145.817 122.525 l
147.738 119.288 l
149.658 113.783 l
153.413 98.0865 l
157.343 81.4044 l
159.236 76.0722 l
161.129 73.4566 l
162.097 73.2094 l
163.065 73.6395 l
164.033 74.6489 l
165.001 76.1010 l
166.920 79.6004 l
168.840 82.5886 l
169.722 83.3343 l
170.604 83.4769 l
171.486 82.8903 l
172.368 81.4750 l
174.390 74.8086 l
176.412 63.4924 l
180.029 36.0634 l
181.957 21.9838 l
183.885 12.0705 l
184.346 10.6504 l
184.807 9.67712 l
185.269 9.18560 l
185.730 9.20822 l
186.653 10.9101 l
187.576 14.9774 l
189.625 33.0394 l
191.674 63.5551 l
192.561 80.3082 l
193.448 98.9079 l
194.335 119.078 l
195.222 140.499 l
196.229 165.874 l
198.243 217.807 l
199.250 243.198 l
200.168 265.362 l
201.086 286.183 l
202.003 305.309 l
202.921 322.437 l
204.929 351.871 l
206.936 369.325 l
207.803 373.164 l
208.669 374.912 l
209.102 375.050 l
209.535 374.728 l
209.968 373.971 l
210.401 372.809 l
212.374 363.241 l
214.347 349.043 l
218.158 320.187 l
220.063 309.560 l
221.967 303.060 l
222.442 302.105 l
222.916 301.405 l
223.390 300.948 l
223.865 300.719 l
224.813 300.880 l
225.762 301.730 l
227.585 304.614 l
229.408 307.948 l
230.393 309.454 l
231.378 310.513 l
232.364 310.977 l
233.349 310.743 l
235.227 308.180 l
237.105 302.937 l
241.058 286.203 l
244.637 271.094 l
246.615 265.228 l
248.592 261.758 l
249.539 260.913 l
250.486 260.519 l
251.433 260.491 l
252.380 260.725 l
254.270 261.509 l
256.159 261.930 l
257.146 261.720 l
258.133 261.093 l
259.120 259.985 l
260.107 258.362 l
261.924 254.041 l
263.742 248.236 l
267.465 234.153 l
271.576 221.194 l
273.437 217.717 l
275.298 215.840 l
276.250 215.394 l
277.202 215.201 l
278.153 215.170 l
279.105 215.205 l
280.073 215.202 l
281.040 215.058 l
282.008 214.679 l
282.976 213.984 l
284.755 211.691 l
286.534 207.952 l
290.327 195.927 l
294.092 182.408 l
296.105 176.490 l
298.118 172.276 l
299.007 171.010 l
299.895 170.090 l
300.783 169.483 l
301.671 169.139 l
303.721 168.988 l
305.771 168.960 l
306.696 168.723 l
307.621 168.230 l
308.546 167.415 l
309.471 166.226 l
311.301 162.671 l
313.131 157.556 l
317.068 143.138 l
321.020 129.580 l
322.818 125.483 l
324.616 123.088 l
325.571 122.479 l
326.525 122.262 l
327.480 122.358 l
328.435 122.667 l
330.298 123.444 l
332.162 123.688 l
333.172 123.295 l
334.182 122.391 l
335.191 120.899 l
336.201 118.778 l
337.949 113.629 l
339.697 106.867 l
343.712 88.7866 l
345.599 81.3739 l
347.486 76.0658 l
348.420 74.4200 l
349.355 73.4700 l
350.289 73.2046 l
351.224 73.5746 l
353.094 75.8477 l
354.964 79.2256 l
355.918 80.9224 l
356.872 82.3316 l
357.826 83.2505 l
358.779 83.4910 l
359.285 83.2863 l
359.791 82.8243 l
360.296 82.0876 l
360.802 81.0627 l
361.813 78.1132 l
362.824 73.9495 l
366.532 49.8648 l
370.192 22.0587 l
371.170 16.3012 l
372.148 12.0114 l
372.637 10.5363 l
373.126 9.56741 l
373.616 9.14581 l
374.105 9.30941 l
376.057 16.4058 l
378.009 34.7061 l
379.761 60.7604 l
381.513 94.9651 l
382.508 117.349 l
383.503 141.340 l
384.498 166.436 l
385.493 192.095 l
S
cliprestore
newpath
0 0 m
0 390.000 l
390.000 390.000 l
390.000 0 l
h
W
Q
q
7.00000 2.63047E-3 381.493 383.164 rc
newpath
9.00000 192.095 m
9.99472 228.619 l
10.9894 263.609 l
11.9841 295.644 l
12.9789 323.511 l
14.7099 359.527 l
16.4409 378.084 l
16.9276 380.238 l
17.4142 381.158 l
17.9009 380.933 l
18.3876 379.664 l
19.3609 374.467 l
20.3343 366.584 l
22.2939 346.933 l
24.2535 328.828 l
25.2286 322.223 l
26.2038 317.724 l
26.6914 316.296 l
27.1789 315.401 l
27.6665 315.011 l
28.1541 315.088 l
29.9623 318.510 l
31.7704 324.209 l
32.7066 326.846 l
33.6427 328.695 l
34.5788 329.443 l
35.5149 328.911 l
37.4512 323.728 l
39.3875 314.395 l
41.3176 303.819 l
43.2477 295.028 l
44.2403 291.924 l
45.2330 289.950 l
46.2257 289.068 l
47.2183 289.118 l
48.9670 290.632 l
50.7157 292.374 l
51.7000 292.773 l
52.6843 292.437 l
53.6686 291.221 l
54.6529 289.088 l
56.6295 282.402 l
58.6062 273.951 l
60.5111 266.240 l
62.4160 260.701 l
63.2809 259.147 l
64.1458 258.191 l
65.0108 257.762 l
65.8757 257.744 l
66.9041 258.046 l
67.9326 258.426 l
68.9611 258.594 l
69.9895 258.291 l
71.7320 256.203 l
73.4745 251.913 l
77.5284 236.991 l
79.3225 231.113 l
81.1167 227.189 l
82.1010 225.966 l
83.0852 225.323 l
84.0695 225.116 l
85.0537 225.150 l
85.9910 225.208 l
86.9282 225.096 l
87.8654 224.644 l
88.8027 223.718 l
90.7585 219.971 l
92.7143 213.970 l
96.3064 201.099 l
98.2437 195.890 l
100.181 193.008 l
101.187 192.363 l
102.193 192.125 l
103.199 192.095 l
104.205 192.047 l
105.081 191.818 l
105.957 191.276 l
106.833 190.322 l
107.709 188.891 l
109.600 184.153 l
111.492 177.686 l
113.447 170.517 l
115.401 164.441 l
116.357 162.243 l
117.313 160.643 l
118.270 159.629 l
119.226 159.121 l
121.076 159.030 l
122.926 158.950 l
123.953 158.392 l
124.980 157.228 l
126.007 155.357 l
127.034 152.765 l
130.726 139.481 l
132.696 132.508 l
134.667 127.714 l
135.560 126.473 l
136.453 125.795 l
137.346 125.595 l
138.239 125.741 l
139.215 126.095 l
140.191 126.412 l
141.167 126.442 l
142.143 125.965 l
143.980 123.156 l
145.817 117.652 l
149.658 101.623 l
151.535 95.2562 l
153.413 91.8793 l
154.395 91.4163 l
155.378 91.7145 l
156.361 92.5509 l
157.343 93.6299 l
158.290 94.5847 l
159.236 95.1485 l
160.183 95.0474 l
161.129 94.0684 l
163.065 88.9157 l
165.001 79.9910 l
166.920 69.4598 l
168.840 60.2841 l
169.722 57.3305 l
170.604 55.4544 l
171.486 54.7471 l
172.368 55.1946 l
174.390 59.7174 l
176.412 66.0412 l
176.864 67.2037 l
177.316 68.1479 l
177.768 68.8187 l
178.220 69.1654 l
178.672 69.1424 l
179.124 68.7115 l
179.577 67.8424 l
180.029 66.5139 l
181.957 55.6407 l
183.885 37.9483 l
185.730 19.2891 l
187.576 5.69866 l
188.088 3.80581 l
188.600 3.00262 l
189.112 3.41635 l
189.625 5.15783 l
190.649 12.9682 l
191.674 26.8911 l
192.561 43.9371 l
193.448 65.3858 l
194.335 90.7728 l
195.222 119.415 l
196.229 154.769 l
198.243 228.701 l
199.250 264.101 l
200.168 293.743 l
201.086 319.892 l
202.003 341.800 l
202.921 358.969 l
203.925 372.065 l
204.929 379.312 l
205.431 380.872 l
205.933 381.167 l
206.435 380.303 l
206.936 378.400 l
208.669 365.774 l
210.401 348.361 l
212.374 329.820 l
214.347 318.097 l
214.823 316.582 l
215.300 315.581 l
215.776 315.071 l
216.253 315.018 l
216.729 315.377 l
217.205 316.095 l
217.682 317.114 l
218.158 318.367 l
220.063 324.352 l
221.967 328.803 l
222.916 329.449 l
223.865 328.770 l
224.813 326.739 l
225.762 323.471 l
227.585 314.660 l
229.408 304.645 l
231.378 295.460 l
233.349 290.144 l
234.288 289.155 l
235.227 289.034 l
236.166 289.575 l
237.105 290.512 l
238.094 291.600 l
239.082 292.455 l
240.070 292.775 l
241.058 292.330 l
242.848 289.221 l
244.637 283.345 l
248.592 266.843 l
250.486 261.094 l
252.380 258.200 l
253.325 257.747 l
254.270 257.771 l
255.215 258.070 l
256.159 258.420 l
257.146 258.595 l
258.133 258.348 l
259.120 257.505 l
260.107 255.962 l
261.924 251.282 l
263.742 244.804 l
265.604 237.624 l
267.465 231.405 l
268.493 228.816 l
269.521 226.950 l
270.549 225.791 l
271.576 225.238 l
273.437 225.162 l
275.298 225.059 l
276.250 224.539 l
277.202 223.516 l
278.153 221.911 l
279.105 219.713 l
281.040 213.691 l
282.976 206.593 l
284.755 200.459 l
286.534 195.797 l
287.483 194.118 l
288.431 193.004 l
289.379 192.386 l
290.327 192.137 l
291.269 192.095 l
292.210 192.073 l
293.151 191.886 l
294.092 191.367 l
296.105 188.597 l
298.118 183.309 l
301.671 170.595 l
303.721 164.252 l
305.771 160.371 l
306.696 159.499 l
307.621 159.079 l
308.546 158.982 l
309.471 159.042 l
310.386 159.076 l
311.301 158.907 l
312.216 158.378 l
313.131 157.365 l
315.100 153.272 l
317.068 146.818 l
321.020 132.272 l
321.919 129.794 l
322.818 127.883 l
323.717 126.571 l
324.616 125.837 l
325.571 125.595 l
326.525 125.753 l
327.480 126.102 l
328.435 126.411 l
329.367 126.451 l
330.298 126.036 l
331.230 125.017 l
332.162 123.303 l
334.182 117.220 l
336.201 108.866 l
337.949 101.446 l
339.697 95.4859 l
340.701 93.1870 l
341.704 91.8391 l
342.708 91.4145 l
343.712 91.7709 l
345.599 93.6398 l
347.486 95.1494 l
348.420 95.0523 l
349.355 94.1009 l
350.289 92.1720 l
351.224 89.2413 l
353.094 80.7971 l
354.964 70.5644 l
356.872 61.1487 l
358.779 55.5635 l
359.791 54.7419 l
360.802 55.4273 l
361.813 57.4088 l
362.824 60.2959 l
364.678 66.0934 l
366.532 69.1857 l
366.989 69.1033 l
367.447 68.5976 l
367.904 67.6388 l
368.362 66.2067 l
369.277 61.8957 l
370.192 55.7294 l
372.148 37.7767 l
374.105 18.1006 l
375.081 10.0806 l
376.057 4.70547 l
376.545 3.33663 l
377.033 3.00595 l
377.521 3.81832 l
378.009 5.86416 l
379.761 24.3177 l
381.513 60.6587 l
382.508 88.5276 l
383.503 120.567 l
384.498 155.564 l
385.493 192.095 l
S
cliprestore
newpath
0 0 m
0 390.000 l
390.000 390.000 l
390.000 0 l
h
W
Q
Q
q
1.00000 w
2 J
0 j
q
newpath
338.000 366.000 m
338.000 369.000 l
S
newpath
244.000 366.000 m
244.000 369.000 l
S
newpath
150.000 366.000 m
150.000 369.000 l
S
newpath
56.0000 366.000 m
56.0000 369.000 l
S
newpath
9.00000 366.000 m
385.493 366.000 l
S
Q
q
q
newpath
9.00000 366.000 m
9.00000 371.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
q
6 379 7 13 rc
newpath
16.7900 386.438 m
8.21000 386.438 l
8.21000 385.762 l
16.7900 385.762 l
h
f
Q
newpath
20.9604 388.343 m
20.3574 390.000 l
15.2793 390.000 l
15.2793 389.765 l
16.7731 388.402 17.8247 387.289 18.4340 386.426  c
19.0434 385.563 19.3481 384.773 19.3481 384.058  c
19.3481 383.512 19.1809 383.064 18.8466 382.712  c
18.5123 382.361 18.1124 382.186 17.6469 382.186  c
17.2238 382.186 16.8439 382.309 16.5075 382.557  c
16.1711 382.804 15.9225 383.167 15.7617 383.646  c
15.5268 383.646 l
15.6326 382.863 15.9045 382.262 16.3425 381.843  c
16.7805 381.424 17.3274 381.214 17.9834 381.214  c
18.6816 381.214 19.2645 381.439 19.7321 381.887  c
20.1997 382.336 20.4335 382.865 20.4335 383.474  c
20.4335 383.910 20.3320 384.346 20.1289 384.782  c
19.8157 385.467 19.3079 386.193 18.6054 386.959  c
17.5517 388.110 16.8937 388.804 16.6313 389.041  c
18.8784 389.041 l
19.3354 389.041 19.6560 389.024 19.8400 388.990  c
20.0241 388.956 20.1902 388.888 20.3383 388.784  c
20.4864 388.680 20.6155 388.533 20.7255 388.343  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
newpath
103.000 366.000 m
103.000 371.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
q
100 379 7 13 rc
newpath
110.790 386.438 m
102.210 386.438 l
102.210 385.762 l
110.790 385.762 l
h
f
Q
newpath
110.523 382.236 m
112.618 381.214 l
112.827 381.214 l
112.827 388.482 l
112.827 388.965 112.847 389.265 112.887 389.384  c
112.928 389.502 113.011 389.593 113.138 389.657  c
113.265 389.720 113.523 389.756 113.913 389.765  c
113.913 390.000 l
110.675 390.000 l
110.675 389.765 l
111.082 389.756 111.344 389.721 111.462 389.660  c
111.581 389.599 111.663 389.516 111.710 389.412  c
111.757 389.309 111.780 388.999 111.780 388.482  c
111.780 383.836 l
111.780 383.210 111.759 382.808 111.716 382.630  c
111.687 382.495 111.633 382.395 111.554 382.332  c
111.476 382.268 111.382 382.236 111.272 382.236  c
111.115 382.236 110.897 382.302 110.618 382.433  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
newpath
197.000 366.000 m
197.000 371.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
193.469 383.747 m
193.469 382.765 193.617 381.920 193.914 381.211  c
194.210 380.502 194.603 379.974 195.094 379.627  c
195.475 379.352 195.869 379.214 196.275 379.214  c
196.935 379.214 197.528 379.551 198.052 380.224  c
198.708 381.057 199.036 382.187 199.036 383.613  c
199.036 384.612 198.892 385.460 198.605 386.159  c
198.317 386.857 197.950 387.364 197.503 387.679  c
197.057 387.994 196.626 388.152 196.211 388.152  c
195.391 388.152 194.707 387.667 194.161 386.698  c
193.700 385.882 193.469 384.898 193.469 383.747  c
h
194.713 383.905 m
194.713 385.090 194.859 386.057 195.151 386.806  c
195.393 387.437 195.752 387.752 196.231 387.752  c
196.459 387.752 196.696 387.649 196.941 387.444  c
197.187 387.239 197.373 386.895 197.500 386.413  c
197.695 385.685 197.792 384.659 197.792 383.334  c
197.792 382.352 197.690 381.533 197.487 380.877  c
197.335 380.391 197.138 380.046 196.897 379.843  c
196.724 379.703 196.514 379.633 196.269 379.633  c
195.981 379.633 195.725 379.762 195.501 380.021  c
195.196 380.372 194.988 380.924 194.878 381.677  c
194.768 382.431 194.713 383.173 194.713 383.905  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
newpath
291.000 366.000 m
291.000 371.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
294.523 382.236 m
296.618 381.214 l
296.827 381.214 l
296.827 388.482 l
296.827 388.965 296.847 389.265 296.887 389.384  c
296.928 389.502 297.011 389.593 297.138 389.657  c
297.265 389.720 297.523 389.756 297.913 389.765  c
297.913 390.000 l
294.675 390.000 l
294.675 389.765 l
295.082 389.756 295.344 389.721 295.462 389.660  c
295.581 389.599 295.663 389.516 295.710 389.412  c
295.757 389.309 295.780 388.999 295.780 388.482  c
295.780 383.836 l
295.780 383.210 295.759 382.808 295.716 382.630  c
295.687 382.495 295.633 382.395 295.554 382.332  c
295.476 382.268 295.382 382.236 295.272 382.236  c
295.115 382.236 294.897 382.302 294.618 382.433  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
newpath
385.000 366.000 m
385.000 371.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
392.960 388.343 m
392.357 390.000 l
387.279 390.000 l
387.279 389.765 l
388.773 388.402 389.824 387.289 390.434 386.426  c
391.043 385.563 391.348 384.773 391.348 384.058  c
391.348 383.512 391.181 383.064 390.846 382.712  c
390.512 382.361 390.112 382.186 389.647 382.186  c
389.223 382.186 388.844 382.309 388.507 382.557  c
388.171 382.804 387.922 383.167 387.761 383.646  c
387.526 383.646 l
387.632 382.863 387.904 382.262 388.342 381.843  c
388.780 381.424 389.327 381.214 389.983 381.214  c
390.681 381.214 391.264 381.439 391.732 381.887  c
392.199 382.336 392.433 382.865 392.433 383.474  c
392.433 383.910 392.332 384.346 392.128 384.782  c
391.815 385.467 391.307 386.193 390.605 386.959  c
389.551 388.110 388.893 388.804 388.631 389.041  c
390.878 389.041 l
391.335 389.041 391.656 389.024 391.840 388.990  c
392.024 388.956 392.190 388.888 392.338 388.784  c
392.486 388.680 392.615 388.533 392.725 388.343  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
Q
q
newpath
197.000 47.0000 m
195.000 47.0000 l
S
newpath
197.000 105.000 m
195.000 105.000 l
S
newpath
197.000 163.000 m
195.000 163.000 l
S
newpath
197.000 221.000 m
195.000 221.000 l
S
newpath
197.000 279.000 m
195.000 279.000 l
S
newpath
197.000 337.000 m
195.000 337.000 l
S
newpath
197.000 381.167 m
197.000 3.00262 l
S
Q
[ 1.00000 0 0 1.00000 0 0 ] concat
q
[ 1.00000 0 0 1.00000 0 0 ] concat
q
167 177 8 15 rc
Q
cliprestore
newpath
0 0 m
0 390.000 l
390.000 390.000 l
390.000 0 l
h
W
Q
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0 0 1.00000 0 0 ] concat
q
q
newpath
197.000 366.000 m
192.000 366.000 l
S
Q
q
newpath
197.000 308.000 m
192.000 308.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
187.523 310.236 m
189.618 309.214 l
189.827 309.214 l
189.827 316.482 l
189.827 316.965 189.847 317.265 189.887 317.384  c
189.928 317.502 190.011 317.593 190.138 317.657  c
190.265 317.720 190.523 317.756 190.913 317.765  c
190.913 318.000 l
187.675 318.000 l
187.675 317.765 l
188.082 317.756 188.344 317.721 188.462 317.660  c
188.581 317.599 188.663 317.516 188.710 317.412  c
188.757 317.309 188.780 316.999 188.780 316.482  c
188.780 311.836 l
188.780 311.210 188.759 310.808 188.716 310.630  c
188.687 310.495 188.633 310.395 188.554 310.332  c
188.476 310.268 188.382 310.236 188.272 310.236  c
188.115 310.236 187.897 310.302 187.618 310.433  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
newpath
197.000 250.000 m
192.000 250.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
191.960 258.343 m
191.357 260.000 l
186.279 260.000 l
186.279 259.765 l
187.773 258.402 188.824 257.289 189.434 256.426  c
190.043 255.563 190.348 254.773 190.348 254.058  c
190.348 253.512 190.181 253.064 189.846 252.712  c
189.512 252.361 189.112 252.186 188.647 252.186  c
188.223 252.186 187.844 252.309 187.507 252.557  c
187.171 252.804 186.922 253.167 186.761 253.646  c
186.526 253.646 l
186.632 252.863 186.904 252.262 187.342 251.843  c
187.780 251.424 188.327 251.214 188.983 251.214  c
189.681 251.214 190.264 251.439 190.732 251.887  c
191.199 252.336 191.433 252.865 191.433 253.474  c
191.433 253.910 191.332 254.346 191.128 254.782  c
190.815 255.467 190.307 256.193 189.605 256.959  c
188.551 258.110 187.893 258.804 187.631 259.041  c
189.878 259.041 l
190.335 259.041 190.656 259.024 190.840 258.990  c
191.024 258.956 191.190 258.888 191.338 258.784  c
191.486 258.680 191.615 258.533 191.725 258.343  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
newpath
197.000 192.000 m
192.000 192.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
186.660 195.030 m
186.905 194.450 187.215 194.003 187.590 193.687  c
187.964 193.372 188.431 193.214 188.989 193.214  c
189.679 193.214 190.208 193.439 190.576 193.887  c
190.856 194.222 190.995 194.579 190.995 194.960  c
190.995 195.586 190.602 196.234 189.814 196.902  c
190.343 197.110 190.743 197.406 191.014 197.791  c
191.285 198.176 191.420 198.629 191.420 199.149  c
191.420 199.894 191.183 200.540 190.710 201.085  c
190.092 201.796 189.197 202.152 188.024 202.152  c
187.445 202.152 187.050 202.080 186.841 201.936  c
186.631 201.792 186.526 201.638 186.526 201.473  c
186.526 201.350 186.576 201.242 186.676 201.149  c
186.775 201.056 186.895 201.009 187.034 201.009  c
187.140 201.009 187.248 201.026 187.358 201.060  c
187.430 201.081 187.593 201.158 187.847 201.292  c
188.101 201.425 188.276 201.504 188.374 201.530  c
188.530 201.576 188.697 201.600 188.875 201.600  c
189.307 201.600 189.682 201.432 190.002 201.098  c
190.321 200.764 190.481 200.368 190.481 199.911  c
190.481 199.577 190.407 199.251 190.259 198.934  c
190.149 198.697 190.028 198.517 189.897 198.394  c
189.715 198.225 189.465 198.071 189.148 197.934  c
188.831 197.796 188.507 197.728 188.177 197.728  c
187.974 197.728 l
187.974 197.537 l
188.308 197.495 188.643 197.374 188.980 197.175  c
189.316 196.976 189.561 196.737 189.713 196.458  c
189.865 196.179 189.941 195.872 189.941 195.538  c
189.941 195.102 189.805 194.749 189.532 194.481  c
189.259 194.212 188.919 194.078 188.513 194.078  c
187.857 194.078 187.309 194.429 186.869 195.131  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
newpath
197.000 134.000 m
192.000 134.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
192.049 140.826 m
192.049 141.727 l
190.894 141.727 l
190.894 144.000 l
189.846 144.000 l
189.846 141.727 l
186.203 141.727 l
186.203 140.915 l
190.195 135.214 l
190.894 135.214 l
190.894 140.826 l
h
189.846 140.826 m
189.846 136.554 l
186.825 140.826 l
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
newpath
197.000 76.0000 m
192.000 76.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
191.643 77.3925 m
191.147 78.4716 l
188.558 78.4716 l
187.993 79.6269 l
189.114 79.7919 190.003 80.2088 190.659 80.8774  c
191.222 81.4529 191.503 82.1300 191.503 82.9086  c
191.503 83.3614 191.411 83.7804 191.227 84.1655  c
191.043 84.5506 190.811 84.8785 190.532 85.1494  c
190.252 85.4202 189.941 85.6381 189.599 85.8032  c
189.112 86.0359 188.613 86.1523 188.101 86.1523  c
187.584 86.1523 187.209 86.0645 186.974 85.8889  c
186.739 85.7133 186.622 85.5196 186.622 85.3081  c
186.622 85.1896 186.670 85.0848 186.768 84.9939  c
186.865 84.9029 186.988 84.8574 187.136 84.8574  c
187.246 84.8574 187.342 84.8743 187.425 84.9082  c
187.507 84.9420 187.648 85.0288 187.847 85.1684  c
188.164 85.3885 188.486 85.4985 188.812 85.4985  c
189.307 85.4985 189.741 85.3112 190.116 84.9367  c
190.491 84.5622 190.678 84.1062 190.678 83.5688  c
190.678 83.0483 190.511 82.5627 190.176 82.1120  c
189.842 81.6613 189.381 81.3133 188.793 81.0678  c
188.331 80.8774 187.703 80.7674 186.907 80.7377  c
188.558 77.3925 l
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
newpath
197.000 18.0000 m
192.000 18.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
191.827 19.2148 m
191.827 19.4497 l
191.268 19.5047 190.812 19.6158 190.459 19.7829  c
190.105 19.9501 189.756 20.2050 189.411 20.5478  c
189.067 20.8906 188.781 21.2725 188.554 21.6936  c
188.328 22.1146 188.139 22.6150 187.986 23.1948  c
188.596 22.7758 189.207 22.5664 189.821 22.5664  c
190.409 22.5664 190.919 22.8033 191.351 23.2773  c
191.782 23.7513 191.998 24.3606 191.998 25.1054  c
191.998 25.8248 191.780 26.4807 191.344 27.0732  c
190.820 27.7926 190.126 28.1523 189.262 28.1523  c
188.674 28.1523 188.175 27.9576 187.764 27.5683  c
186.960 26.8108 186.558 25.8291 186.558 24.6230  c
186.558 23.8528 186.713 23.1207 187.022 22.4267  c
187.330 21.7327 187.772 21.1170 188.345 20.5795  c
188.918 20.0421 189.467 19.6803 189.992 19.4941  c
190.517 19.3079 191.006 19.2148 191.459 19.2148  c
h
187.878 23.6582 m
187.802 24.2294 187.764 24.6907 187.764 25.0419  c
187.764 25.4482 187.839 25.8894 187.990 26.3654  c
188.140 26.8415 188.363 27.2192 188.659 27.4985  c
188.875 27.6974 189.137 27.7968 189.446 27.7968  c
189.814 27.7968 190.144 27.6233 190.433 27.2763  c
190.723 26.9293 190.868 26.4342 190.868 25.7910  c
190.868 25.0673 190.724 24.4410 190.437 23.9121  c
190.149 23.3831 189.740 23.1186 189.211 23.1186  c
189.051 23.1186 188.878 23.1525 188.694 23.2202  c
188.510 23.2879 188.238 23.4339 187.878 23.6582  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
Q
Q
Q
cliprestore
0 0 400 400 rc
[ 1.00000 0 0 1.00000 0 0 ] concat
q
[ 1.00000 0 0 1.00000 0 0 ] concat
q
3 4 56 32 rc
newpath
25.5097 11.7851 m
25.5097 12.2548 l
24.8834 12.3564 24.3248 12.6907 23.8339 13.2578  c
23.4785 13.6809 22.9495 14.6754 22.2470 16.2412  c
16.3183 29.3935 l
15.8994 29.3935 l
9.99609 15.7080 l
9.28515 14.0576 8.80908 13.0885 8.56787 12.8007  c
8.32666 12.5130 7.87174 12.3310 7.20312 12.2548  c
7.20312 11.7851 l
15.4550 11.7851 l
15.4550 12.2548 l
15.1757 12.2548 l
14.4309 12.2548 13.9231 12.3479 13.6523 12.5341  c
13.4576 12.6611 13.3603 12.8473 13.3603 13.0927  c
13.3603 13.2451 13.3942 13.4249 13.4619 13.6323  c
13.5296 13.8396 13.7581 14.3961 14.1474 15.3017  c
17.8164 23.8710 l
21.2187 16.2412 l
21.6250 15.3186 21.8746 14.7008 21.9677 14.3877  c
22.0608 14.0745 22.1074 13.8079 22.1074 13.5878  c
22.1074 13.3339 22.0397 13.1097 21.9043 12.9150  c
21.7688 12.7203 21.5699 12.5722 21.3076 12.4707  c
20.9436 12.3268 20.4612 12.2548 19.8603 12.2548  c
19.8603 11.7851 l
h
35.2978 28.5302 m
35.2978 29.0000 l
26.2968 29.0000 l
26.2968 28.5302 l
26.8681 28.5302 l
27.3675 28.5302 27.7695 28.4414 28.0742 28.2636  c
28.2942 28.1451 28.4635 27.9420 28.5820 27.6543  c
28.6751 27.4511 28.7216 26.9179 28.7216 26.0546  c
28.7216 14.7304 l
28.7216 13.8502 28.6751 13.3001 28.5820 13.0800  c
28.4889 12.8600 28.3006 12.6674 28.0170 12.5024  c
27.7335 12.3374 27.3505 12.2548 26.8681 12.2548  c
26.2968 12.2548 l
26.2968 11.7851 l
35.2978 11.7851 l
35.2978 12.2548 l
34.7265 12.2548 l
34.2272 12.2548 33.8252 12.3437 33.5205 12.5214  c
33.3004 12.6399 33.1269 12.8431 33.0000 13.1308  c
32.9069 13.3339 32.8603 13.8671 32.8603 14.7304  c
32.8603 26.0546 l
32.8603 26.9349 32.9090 27.4850 33.0063 27.7050  c
33.1036 27.9251 33.2941 28.1176 33.5776 28.2827  c
33.8611 28.4477 34.2441 28.5302 34.7265 28.5302  c
h
f
Q
cliprestore
newpath
0 0 m
0 400.000 l
400.000 400.000 l
400.000 0 l
h
W
Q
[ 1.00000 0 0 1.00000 0 0 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0 0 1.00000 0 0 ] concat
cliprestore
end end restore showpage

%%Trailer
%%EOF
